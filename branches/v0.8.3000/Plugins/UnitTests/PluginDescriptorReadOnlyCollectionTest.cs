// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Virtuoso.Miranda.Plugins;
using Virtuoso.Miranda.Plugins.Collections;
namespace Virtuoso.Miranda.Plugins.UnitTests
{
    /// <summary>
    ///This is a test class for Virtuoso.Miranda.Plugins.PluginDescriptorReadOnlyCollection and is intended
    ///to contain all Virtuoso.Miranda.Plugins.PluginDescriptorReadOnlyCollection Unit Tests
    ///</summary>
    [TestClass()]
    public class PluginDescriptorReadOnlyCollectionTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for ContainsDescriptorOf (MirandaPlugin)
        ///</summary>
        [TestMethod()]
        public void ContainsDescriptorOfTest()
        {
            PluginDescriptorCollection list = new PluginDescriptorCollection();
            MirandaPlugin plugin = Virtuoso_Miranda_Plugins_MirandaPlugin_EmptyPluginAccessor.CreatePrivate();
            PluginDescriptor descriptor = Virtuoso_Miranda_Plugins_PluginDescriptorAccessor.CreatePrivate(plugin);
            list.Add(descriptor);

            PluginDescriptorReadOnlyCollection target = new PluginDescriptorReadOnlyCollection(list);

            bool expected = true;
            bool actual = target.ContainsDescriptorOf(plugin);
            Assert.AreEqual<bool>(expected, actual, "Virtuoso.Miranda.Plugins.PluginDescriptorReadOnlyCollection.ContainsDescriptorOf did not return the expected value.");

            expected = true;
            actual = target.ContainsDescriptorOf(plugin.GetType());
            Assert.AreEqual<bool>(expected, actual, "Virtuoso.Miranda.Plugins.PluginDescriptorReadOnlyCollection.ContainsDescriptorOf did not return the expected value.");

            Assert.AreEqual<bool>(false, target.ContainsDescriptorOf(Virtuoso_Miranda_Plugins_MirandaPlugin_EmptyPluginAccessor.CreatePrivate()), "False result returned from the ContainsDescriptorOf method.");
            Assert.AreEqual<bool>(false, target.ContainsDescriptorOf(typeof(string)), "False result returned from the ContainsDescriptorOf method.");
        }

        /// <summary>
        ///A test for FindDescriptorOf (MirandaPlugin)
        ///</summary>
        [TestMethod()]
        public void FindDescriptorTest()
        {
            PluginDescriptorCollection list = new PluginDescriptorCollection();
            MirandaPlugin plugin = Virtuoso_Miranda_Plugins_MirandaPlugin_EmptyPluginAccessor.CreatePrivate();
            PluginDescriptor descriptor = Virtuoso_Miranda_Plugins_PluginDescriptorAccessor.CreatePrivate(plugin);
            list.Add(descriptor);

            PluginDescriptorReadOnlyCollection target = new PluginDescriptorReadOnlyCollection(list);

            PluginDescriptor expected = descriptor;
            PluginDescriptor actual = target.FindDescriptorOf(plugin);
            Assert.AreEqual<PluginDescriptor>(expected, actual, "Virtuoso.Miranda.Plugins.PluginDescriptorReadOnlyCollection.FindDescriptorOf did not return the expected value.");

            expected = descriptor;
            actual = target.FindDescriptorOf(plugin.GetType());
            Assert.AreEqual<PluginDescriptor>(expected, actual, "Virtuoso.Miranda.Plugins.PluginDescriptorReadOnlyCollection.FindDescriptorOf did not return the expected value.");

            Assert.AreEqual<PluginDescriptor>(null, target.FindDescriptorOf(Virtuoso_Miranda_Plugins_MirandaPlugin_EmptyPluginAccessor.CreatePrivate()), "False result returned from the FindDescriptorOf method.");
            Assert.AreEqual<PluginDescriptor>(null, target.FindDescriptorOf(typeof(string)), "False result returned from the FindDescriptorOf method.");
        }
    }
}
