// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Virtuoso.Miranda.Plugins;
using Virtuoso.Miranda.Plugins.Infrastructure;
namespace Virtuoso.Miranda.Plugins.UnitTests
{
    /// <summary>
    ///This is a test class for Virtuoso.Miranda.Plugins.Infrastructure.HookDescriptor and is intended
    ///to contain all Virtuoso.Miranda.Plugins.Infrastructure.HookDescriptor Unit Tests
    ///</summary>
    [TestClass()]
    public class HookDescriptorTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for HookDescriptor (string, Callback, HookType)
        ///</summary>
        [TestMethod(), ExpectedException(typeof(ArgumentNullException))]
        public void ConstructorTest()
        {
            Virtuoso_Miranda_Plugins_Infrastructure_HookDescriptorAccessor.CreatePrivate(null, null, Virtuoso_Miranda_Plugins_Infrastructure_HookTypeAccessor.Undefined);
        }

        /// <summary>
        ///A test for HookDescriptor (string, Callback, HookType)
        ///</summary>
        [TestMethod(), ExpectedException(typeof(ArgumentNullException))]
        public void ConstructorTest2()
        {
            Virtuoso_Miranda_Plugins_Infrastructure_HookDescriptorAccessor.CreatePrivate("foo", null, Virtuoso_Miranda_Plugins_Infrastructure_HookTypeAccessor.Undefined);
        }

        /// <summary>
        ///A test for Equals (object)
        ///</summary>
        [TestMethod()]
        public void EqualsTest()
        {
            Callback callback1 = delegate { return 0; };
            Callback callback2 = delegate { return 1; };
            
            object desc1 = Virtuoso_Miranda_Plugins_Infrastructure_HookDescriptorAccessor.CreatePrivate("a", callback1, Virtuoso_Miranda_Plugins_Infrastructure_HookTypeAccessor.EventHook);
            object desc2 = Virtuoso_Miranda_Plugins_Infrastructure_HookDescriptorAccessor.CreatePrivate("a", callback1, Virtuoso_Miranda_Plugins_Infrastructure_HookTypeAccessor.EventHook);
            object desc3 = Virtuoso_Miranda_Plugins_Infrastructure_HookDescriptorAccessor.CreatePrivate("a", callback2, Virtuoso_Miranda_Plugins_Infrastructure_HookTypeAccessor.EventHook);
            object desc4 = Virtuoso_Miranda_Plugins_Infrastructure_HookDescriptorAccessor.CreatePrivate("b", callback1, Virtuoso_Miranda_Plugins_Infrastructure_HookTypeAccessor.EventHook);
            object desc5 = Virtuoso_Miranda_Plugins_Infrastructure_HookDescriptorAccessor.CreatePrivate("a", callback1, Virtuoso_Miranda_Plugins_Infrastructure_HookTypeAccessor.ServiceFunction);
            object desc6 = Virtuoso_Miranda_Plugins_Infrastructure_HookDescriptorAccessor.CreatePrivate("b", callback2, Virtuoso_Miranda_Plugins_Infrastructure_HookTypeAccessor.ServiceFunction);

            Assert.AreEqual<bool>(true, desc1.Equals(desc2), "HookDescriptor.Equals returned wrong result.");
            Assert.AreEqual<bool>(false, desc1.Equals(desc3), "HookDescriptor.Equals returned wrong result.");
            Assert.AreEqual<bool>(false, desc1.Equals(desc4), "HookDescriptor.Equals returned wrong result.");
            Assert.AreEqual<bool>(false, desc1.Equals(desc5), "HookDescriptor.Equals returned wrong result.");
            Assert.AreEqual<bool>(false, desc1.Equals(desc6), "HookDescriptor.Equals returned wrong result.");

            Assert.AreEqual<bool>(false, desc1.Equals(null), "HookDescriptor.Equals returned wrong result.");
            Assert.AreEqual<bool>(false, desc1.Equals(new object()), "HookDescriptor.Equals returned wrong result.");
        }
    }
}
